require 'spec_helper'
require 'controllers/authentication_helper'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe MappingsController do
  before(:each) do
    sign_on
  end

  describe 'index' do
    let(:survey) { stub_model EpiSurveyor::Survey, questions: [question] }
    let(:sf_object) { stub_model Salesforce::Base, name: 'name', label: 'label'}
    let(:question) { stub 'question', name: 'name' }

    before do
      EpiSurveyor::Survey.stub!(:find).and_return survey
      Salesforce::Base.stub!(:where).with(enabled: true).and_return [sf_object]
    end

    it 'should populate survey' do
      EpiSurveyor::Survey.should_receive(:find).with("1").and_return survey
      get :index, :survey_id => "1"
      response.should be_success
      assigns[:survey].should == survey
    end

    it 'should retrieve select list for selecting questions' do
      get :index, :survey_id => "1"
      assigns[:questions_for_select].should == [['name', 'name']]
    end

    it 'should retrieve select list for selecting active salesforce objects' do
      get :index, :survey_id => "1"
      assigns[:sfobjects_for_select].should == [['name', 'label']]
    end
  end

  describe 'source' do
    it 'should get the list of all surveys excluding the current survey' do
      current_survey = EpiSurveyor::Survey.new(:id => 1)
      EpiSurveyor::Survey.should_receive(:find).with(1).and_return(current_survey)
      surveys = [EpiSurveyor::Survey.new, EpiSurveyor::Survey.new]
      EpiSurveyor::Survey.should_receive(:all).and_return(surveys + [current_survey])
      get :source, :survey_id => 1
      response.should be_success
      assigns[:surveys].should == surveys
      assigns[:survey].should == current_survey
    end
  end
  
  describe 'clone' do
    
    before(:each) do
      @current_survey = EpiSurveyor::Survey.new
      EpiSurveyor::Survey.should_receive(:find).with(1).and_return(@current_survey)
      @source_survey = EpiSurveyor::Survey.new
      EpiSurveyor::Survey.should_receive(:find).with(2).and_return(@source_survey)      
    end
    
    it 'should call the clone_mappings_from!' do
      @current_survey.should_receive(:clone_mappings_from!).with(@source_survey)
      post :clone, :survey_id => 1, :source_survey_id => 2
      response.should redirect_to survey_mappings_path(1)
    end
    
    it 'should put error flash when there is a MappingCloneException' do
      @current_survey.should_receive(:clone_mappings_from!).with(@source_survey).and_raise(MappingCloneException.new(['a', 'b']))      
      post :clone, :survey_id => 1, :source_survey_id => 2
      flash[:error].should == 'Could not clone because of these missing questions in : a, b'
    end
  end
end
